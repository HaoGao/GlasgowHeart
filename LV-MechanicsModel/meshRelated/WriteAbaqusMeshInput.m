function WriteAbaqusMeshInput(abaqusInputData, abaqusInputFileName, abaqusFiberDir,workingDir)

cd(abaqusFiberDir);
fid = fopen(abaqusInputFileName,'w');
cd(workingDir);

%%%headings 
fprintf(fid, '**  ***********************************\n');
fprintf(fid, '*Heading\n');
fprintf(fid, '** Job name: Job-1 Model name: hyjheartLVhexamesh\n');
fprintf(fid, '** Generated by: Hao Gao, Univeristy of Glasgow on %s\n', date());
fprintf(fid, '*Preprint, echo=NO, model=NO, history=NO, contact=NO\n');
fprintf(fid, '**\n');
fprintf(fid, '** PARTS\n');
fprintf(fid, '**\n');

fprintf(fid, '*Part, name=PART-1\n');

%%%output the nodes
fprintf(fid, '*Node\n');
scaleTomm = abaqusInputData.scaleTomm;
for i = 1 : size(abaqusInputData.node,1)
    fprintf(fid, '\t%d, \t\t%f, \t%f, \t%f\n', i, abaqusInputData.node(i,1)*scaleTomm,...
                                                      abaqusInputData.node(i,2)*scaleTomm,...
                                                      abaqusInputData.node(i,3)*scaleTomm);
end
%%%output the element
fprintf(fid, '*Element, type=C3D8H\n');
for i = 1 : size(abaqusInputData.elem,1)
    fprintf(fid, '\t%d, \t\t%d, \t%d, \t%d, \t%d, \t%d, \t%d, \t%d, \t%d\n', i, abaqusInputData.elem(i,1), abaqusInputData.elem(i,2), abaqusInputData.elem(i,3)...
                                                                                  , abaqusInputData.elem(i,4), abaqusInputData.elem(i,5), abaqusInputData.elem(i,6)...
                                                                                  , abaqusInputData.elem(i,7), abaqusInputData.elem(i,8));
end
fprintf(fid,'*Nset, nset=ALL, generate\n');
fprintf(fid, '\t1,\t%d,\t 1\n',size(abaqusInputData.node,1) );
fprintf(fid, '*Elset, elset=SOLID_BODY, generate\n');
fprintf(fid, '\t1,\t%d,\t 1\n',size(abaqusInputData.elem,1) );


%%%now need to output baseNode
fprintf(fid, '*Nset, nset=BASENODE\n');
baseNodes = abaqusInputData.baseNodes;
writeNodes_1(fid, baseNodes);

%%%output endoNodes
fprintf(fid, '*Nset, nset=ENDONODE\n');
endoNodes = abaqusInputData.endoNodes;
writeNodes_1(fid, endoNodes);

%%%output surface
endofaces = abaqusInputData.endofaces;
endofacesT = endofacesDivision(endofaces);
fileExeMid = 'endo';
writefaces_1(fid, fileExeMid, endofacesT);
fprintf(fid, '*Surface, type=ELEMENT, name=%s\n', 'Endocardium');
if ~isempty(endofacesT.S1faces)
    fprintf(fid, '_%s_S1, S1\n',fileExeMid);
end
if ~isempty(endofacesT.S2faces)
    fprintf(fid, '_%s_S2, S2\n',fileExeMid);
end
if ~isempty(endofacesT.S3faces)
    fprintf(fid, '_%s_S3, S3\n',fileExeMid);
end
if ~isempty(endofacesT.S4faces)
    fprintf(fid, '_%s_S4, S4\n',fileExeMid);
end
if ~isempty(endofacesT.S5faces)
    fprintf(fid, '_%s_S5, S5\n',fileExeMid);
end
if ~isempty(endofacesT.S6faces)
    fprintf(fid, '_%s_S6, S6\n',fileExeMid);
end

%%%output epi surface
epifaces = abaqusInputData.epifaces;
epifacesT = endofacesDivision(epifaces);
fileExeMid = 'epi';
writefaces_1(fid, fileExeMid, epifacesT);
fprintf(fid, '*Surface, type=ELEMENT, name=%s\n', 'Epicardium');
if ~isempty(epifacesT.S1faces)
    fprintf(fid, '_%s_S1, S1\n',fileExeMid);
end
if ~isempty(epifacesT.S2faces)
    fprintf(fid, '_%s_S2, S2\n',fileExeMid);
end
if ~isempty(epifacesT.S3faces)
    fprintf(fid, '_%s_S3, S3\n',fileExeMid);
end
if ~isempty(epifacesT.S4faces)
    fprintf(fid, '_%s_S4, S4\n',fileExeMid);
end
if ~isempty(epifacesT.S5faces)
    fprintf(fid, '_%s_S5, S5\n',fileExeMid);
end
if ~isempty(epifacesT.S6faces)
    fprintf(fid, '_%s_S6, S6\n',fileExeMid);
end

%%%output base surface
basefaces = abaqusInputData.basefaces;
basefacesT = endofacesDivision(basefaces);
fileExeMid = 'base';
writefaces_1(fid, fileExeMid, basefacesT);
fprintf(fid, '*Surface, type=ELEMENT, name=%s\n', 'BaseSurf');
if ~isempty(basefacesT.S1faces)
    fprintf(fid, '_%s_S1, S1\n',fileExeMid);
end
if ~isempty(basefacesT.S2faces)
    fprintf(fid, '_%s_S2, S2\n',fileExeMid);
end
if ~isempty(basefacesT.S3faces)
    fprintf(fid, '_%s_S3, S3\n',fileExeMid);
end
if ~isempty(basefacesT.S4faces)
    fprintf(fid, '_%s_S4, S4\n',fileExeMid);
end
if ~isempty(basefacesT.S5faces)
    fprintf(fid, '_%s_S5, S5\n',fileExeMid);
end
if ~isempty(basefacesT.S6faces)
    fprintf(fid, '_%s_S6, S6\n',fileExeMid);
end



fprintf(fid, '*INCLUDE,INPUT=hexdirfibersheetF60S45.inp\n');
fprintf(fid, '** local orthogonal material coordinates axis\n');
fprintf(fid, '*orientation,name=ori-1,local directions=2\n');
fprintf(fid, 'dist1\n');
fprintf(fid, '3,0.0\n');
fprintf(fid, '1,0,0\n');
fprintf(fid, '0,1,0\n');
fprintf(fid, '*Transform, nset=BASENODE, type=C\n');
fprintf(fid, '0,0,0,0,0,1\n');
fprintf(fid, '** \n');
fprintf(fid, '** Section: Section-1-SOLID_BODY\n');
fprintf(fid, '*Solid Section, elset=SOLID_BODY, material=UANISO_HO_MYOCARDIUM,orientation=ori-1\n');
fprintf(fid, '1.0\n');
fprintf(fid, '*End Part\n');
fprintf(fid, '**  \n');
fprintf(fid, '**\n');
fprintf(fid, '** ASSEMBLY\n');
fprintf(fid, '**\n');
fprintf(fid, '*Assembly, name=Assembly\n');
fprintf(fid, '**  \n');
fprintf(fid, '*Instance, name=PART-1_1, part=PART-1\n');
fprintf(fid, '*End Instance\n');
fprintf(fid, '**  \n');
fprintf(fid, '*End Assembly\n');

fclose(fid);

















function writeNodes_1(fid, baseNodes)

rows = floor(length(baseNodes)/16);

for i = 1 : rows
    for j = 1 : 15
        nodeIndex = (i-1)*16 + j;
        fprintf(fid, '%d,\t', baseNodes(nodeIndex));
    end
        nodeIndex = i*16;
        fprintf(fid, '%d\n', baseNodes(nodeIndex));
end

if nodeIndex < length(baseNodes)
    if length(baseNodes)-nodeIndex>1
        for i = nodeIndex+1 : length(baseNodes)-1
            fprintf(fid, '%d,\t', baseNodes(i));
        end
        fprintf(fid, '%d\n', baseNodes(end));
    else
        fprintf(fid, '%d\n', baseNodes(end));
    end
end


function writefaces_1(fid, fileExeMid, endofacesT)

if ~isempty(endofacesT.S1faces)
    str = endofacesT.S1;
    faces = endofacesT.S1faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end

if ~isempty(endofacesT.S2faces)
    str = endofacesT.S2;
    faces = endofacesT.S2faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end
   
if ~isempty(endofacesT.S3faces)
    str = endofacesT.S3;
    faces = endofacesT.S3faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end

if ~isempty(endofacesT.S4faces)
    str = endofacesT.S4;
    faces = endofacesT.S4faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end

if ~isempty(endofacesT.S5faces)
    str = endofacesT.S5;
    faces = endofacesT.S5faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end

if ~isempty(endofacesT.S6faces)
    str = endofacesT.S6;
    faces = endofacesT.S6faces;
    writefaces_S123456(fid, fileExeMid,  str, faces);
end


function writefaces_S123456(fid, fileExeMid,  str, faces)
fprintf(fid, '*Elset, elset=_%s_%s, internal\n', fileExeMid, str);
facesLength = length(faces);
      rows = floor(facesLength/16);
    %   facesIndex = 0;
      for i = 1 : rows
         for j = 1 : 15
             facesIndex = (i-1)*16 + j; 
             fprintf(fid, '%d,\t', faces(facesIndex));
         end
            facesIndex = (i-1)*16 + 16;
            fprintf(fid, '%d\n', faces(facesIndex));
      end
      %%%the last row
      if facesIndex < facesLength
          if facesLength-facesIndex>1
              for i = facesIndex+1: facesLength-1
                  fprintf(fid, '%d,\t', faces(i));
              end
                 i = i+1;
                 fprintf(fid, '%d\n', faces(i));
          else
              fprintf(fid, '%d\n', faces(facesIndex+1));
          end
      end




