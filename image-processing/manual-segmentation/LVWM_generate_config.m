clear all; close all; clc;

workingDir = pwd();

CMR_root_Dir_rel = "..\MI_SelectedImages";
CMR_root_Dir_rel_mac = "../MI_SelectedImages";

try 
   cd(CMR_root_Dir_rel);
   CMR_root_Dir = pwd();
   cd(workingDir);
catch 
    CMR_root_Dir = 'E:\HaoGao\PhDs\PhD_Alan\Results\MI_Subject_Reconstruction_Model\MI_SelectedImages';
end

model_root_Dir_rel = "..\MI_Models";
model_root_Dir_rel_mac = "../MI_Models";
cd(model_root_Dir_rel);
model_root_Dir = pwd();
cd(workingDir);

%%locat the xls file;
xls_file_name = "MIPatientSelection_subject3.xlsx";

%%read in the xlsx file
cd(CMR_root_Dir);
[num, patient_IDs, raw] = xlsread(xls_file_name, 'Sheet1', 'A2:A109');
phase_EDs = xlsread(xls_file_name, 'Sheet1', 'C2:C109');
rotated_yes = xlsread(xls_file_name, 'Sheet1', 'E2:E109');
cd(workingDir);

%%now figure out each patient data
for pIndex = 1 : length(phase_EDs)
    patient_name = patient_IDs{pIndex, 1};
    phase_ed = phase_EDs(pIndex);
    
    
    %%go to that folder
    cd(CMR_root_Dir);
    cd(patient_name);
    cd('Dicomes');
    patient_dicom_dir = pwd();
    patient_dicom_dir_rel = sprintf('%s\\%s\\Dicomes',CMR_root_Dir_rel,patient_name);
    patient_dicom_dir_rel_mac = sprintf('%s/%s/Dicomes',CMR_root_Dir_rel_mac,patient_name);
    cd(workingDir);
    %%since we know maximum there will be 8 SA images, and 3 LA images
    
    %%creat the model folder for segmenation results
    cd(model_root_Dir);
    if ~exist(patient_name, 'dir')
        mkdir(patient_name);
    end
    cd(patient_name);
    patient_model_root_dir = pwd();
    patient_model_root_dir_rel = sprintf('%s\\%s', model_root_Dir_rel,patient_name);
    patient_model_root_dir_rel_mac = sprintf('%s/%s', model_root_Dir_rel,patient_name);
    
    cd(patient_model_root_dir);
    if ~exist('earlyDiastole', 'dir')
        mkdir('earlyDiastole'); 
    end
    cd('earlyDiastole');
    patient_model_earlyDiastole_dir = pwd();
    
    cd(patient_model_root_dir);
    patient_name_modified = strrep(patient_name, '-', '_');
    config_name = sprintf('MI_confERD_%s.m', patient_name_modified);
    fid = fopen(config_name, 'w');
    cd(workingDir);
    
    fprintf(fid, '%%generated by Matlab autmatically;\n');
    
    fprintf(fid, '\n\n');
    fprintf(fid, 'if ispc\n');
    fprintf(fid, '\t dicomDir = ''%s'';\n', patient_dicom_dir_rel);
    fprintf(fid, '\t resultDirRoot = ''%s'';\n',model_root_Dir_rel);
    fprintf(fid, '\t resultDir = ''%s\\earlyDiastole'';\n',patient_name);
    fprintf(fid, 'end\n');
    
    fprintf(fid, '\n\n');
    fprintf(fid, 'if ismac || isunix \n');
    fprintf(fid, '\t dicomDir = ''%s'';\n', patient_dicom_dir_rel_mac);
    fprintf(fid, '\t resultDirRoot = ''%s'';\n',model_root_Dir_rel_mac);
    fprintf(fid, '\t resultDir = ''%s/earlyDiastole'';\n',patient_name);
    fprintf(fid, 'end\n');
    
    fprintf(fid, '\n\n');
    fprintf(fid, 'cd(workingDir);\n');
    fprintf(fid, 'try\n');
    fprintf(fid, '\t cd(dicomDir); \n');
    fprintf(fid, '\t dicomDir = pwd();\n');
    fprintf(fid, '\t catch\n');
    fprintf(fid, '\t disp( ''MRI folder is not defined, assinged to [], it will not affect the segmenation steps, only needed when trying to load MR images'');\n');
    fprintf(fid, '\t dicomDir = ''NULL'';\n');
    fprintf(fid, 'end\n');
    fprintf(fid, 'cd(workingDir);\n');
    
    fprintf(fid, '\n\n');
    fprintf(fid, 'cd(workingDir);\n');
    fprintf(fid, 'cd(resultDirRoot);\n');
    fprintf(fid, 'if ~exist(resultDir, ''dir'')\n');
    fprintf(fid, '\t mkdir(resultDir);\n');
    fprintf(fid, 'end\n');
    
    fprintf(fid, 'cd(resultDir);\n');
    fprintf(fid, 'resultDir = pwd();\n');
    fprintf(fid, 'cd(workingDir);\n');

    
    fprintf(fid, 'cd(resultDir);\n');
    fprintf(fid, 'if ~exist(''fibreGeneration'', ''dir'')\n');
    fprintf(fid, '\t mkdir(''fibreGeneration'');\n');
    fprintf(fid, '\t cd(workingDir);\n');
    fprintf(fid, 'end\n');

    %%let's figure out whether we need to move basal plane or not
    fprintf(fid, '\n\n');
    fprintf(fid, 'BasalMovingB = 0; \n');
    fprintf(fid, 'sampleN = 50;\n');
    
    %%this for rotation 
    fprintf(fid, '\n\n');
    if rotated_yes(pIndex)>0.5
        fprintf(fid, 'MRIimageFlipB = 1;\n');
    else
        fprintf(fid, 'MRIimageFlipB = 0;\n');
    end
    fprintf(fid, 'if MRIimageFlipB == 1\n');
    fprintf(fid, '\t disp(''Warning: MRI orientation will be flipped'')\n');
    fprintf(fid, 'end\n');
    
    
    fprintf(fid, '\n\n');
    %%%patient image data
    fprintf(fid, 'patientIndex = 1;seriesIndex = 0;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).name = ''%s'';\n', patient_name);
    fprintf(fid, 'patientConfigs(patientIndex,1).TimeEndOfSystole = %d;\n', phase_ed - 2);
    fprintf(fid, 'patientConfigs(patientIndex,1).TimeEndOfDiastole = 1;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).TimeEarlyOfDiastole = %d;\n', phase_ed);
    fprintf(fid, 'patientConfigs(patientIndex,1).sampleN = sampleN;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).SASliceDistance = 10; %% mm\n');

    fprintf(fid, '\n\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).SASlicePositionApex = 6; \n');
    fprintf(fid, 'patientConfigs(patientIndex,1).totalLVOTSliceLocation = 3;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).totalTimeInstance = 35;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).timeInstanceSelected = patientConfigs(patientIndex,1).TimeEarlyOfDiastole;\n');

    fprintf(fid, '\n\n');
    fprintf(fid, '%% this is for writing out the guide points when fitiing\n');
    fprintf(fid, 'sliceToBeSkipped = [];\n');
    fprintf(fid, 'sliceToBeSkippedLA = [];\n');
    fprintf(fid, '%% basalSlices = [1 2];\n');
    fprintf(fid, '%% middlSlices = [3 4 5];\n');
    fprintf(fid, '%% apicaSlices = [6 7];\n');
    
    
    %%%then need to figure out how many SAs and LAs 
    files = dir(patient_dicom_dir);
    dirFlags = [files.isdir];
    subFolders = files(dirFlags); 
    %%need to excluding first two 
    subFolders = subFolders(3:end);
    
    %%roughly we know SA folders 
    N_SA_folders = size(subFolders,1)-3;
    N_LA_folders = 3;
    
    for i = 1 : N_SA_folders
        fprintf(fid, '\n\n');
        
        %%check whether there are image data within the folder
        SA_series_name = sprintf('SA%d', i);
        cd(patient_dicom_dir);
        cd(SA_series_name);
        files = dir();
        cd(workingDir);
        if i == 1
            totalTimeInstance = size(files,1)-2;
        end
        
        if size(files,1) <= 2
            error_msg = sprintf('no images in %s \\ %s', patient_dicom_dir, SA_series_name);
            disp(error_msg);
            break;
        else
        
            fprintf(fid, 'seriesIndex = seriesIndex + 1;\n');
            fprintf(fid, 'patientConfigs(patientIndex,1).dir(seriesIndex,1).studyDir = dicomDir;\n');
            fprintf(fid, 'patientConfigs(patientIndex,1).dirMidSA(seriesIndex,1).ImgDir = ''%s'';\n', SA_series_name); 
            fprintf(fid, 'patientConfigs(patientIndex,1).studyName(seriesIndex,1).studyName = ''SA-%d'';\n', i);
            fprintf(fid, 'patientConfigs(patientIndex,1).SliceSpec(seriesIndex,1).spec = ''SAcine'';\n');
        end
        
    end
    
    fprintf(fid, '\n\n');
    %%%LVot 1
    fprintf(fid, 'seriesIndex = seriesIndex + 1;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dir(seriesIndex,1).studyDir = dicomDir;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dirMidSA(seriesIndex,1).ImgDir = ''LVOT'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).studyName(seriesIndex,1).studyName = ''LAcine-LVOT-1'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).SliceSpec(seriesIndex,1).spec = ''LAcine_LVOT'';\n');

    fprintf(fid, '\n\n');
    %%4CH
    fprintf(fid, 'seriesIndex = seriesIndex + 1;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dir(seriesIndex,1).studyDir = dicomDir;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dirMidSA(seriesIndex,1).ImgDir = ''HLA'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).studyName(seriesIndex,1).studyName = ''LAcine-4CH-1'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).SliceSpec(seriesIndex,1).spec = ''LAcine_4CH'';\n');

    fprintf(fid, '\n\n');
    %%1CH
    fprintf(fid, 'seriesIndex = seriesIndex + 1;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dir(seriesIndex,1).studyDir = dicomDir;\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).dirMidSA(seriesIndex,1).ImgDir = ''VLA'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).studyName(seriesIndex,1).studyName = ''LAcine-1CH-1'';\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).SliceSpec(seriesIndex,1).spec = ''LAcine_1CH'';\n');

    
    
    fprintf(fid, '\n\n%% update for totalTimeInstance\n');
    fprintf(fid, 'patientConfigs(patientIndex,1).totalTimeInstance = %d;\n', totalTimeInstance);
    
    fclose(fid);
    
        
    
    
end