function abaqusInpGenerationForHexMesh(abaqusInputData, scaleTomm, fidAba)

node = abaqusInputData.node;
ele = abaqusInputData.elem;

endofaces = abaqusInputData.endofaces;
epifaces = abaqusInputData.epifaces;


%%%header file generation
fprintf(fidAba,'**  ***********************************\n');
fprintf(fidAba,'*Heading\n');
fprintf(fidAba,'** Job name: Job-1 Model name: LV Hex Mesh Model\n');
fprintf(fidAba,'** Generated by: Matlab coded by Hao Gao\n');
fprintf(fidAba,'*Preprint, echo=NO, model=NO, history=NO, contact=NO\n');
fprintf(fidAba,'**\n');
fprintf(fidAba,'** PARTS\n');
fprintf(fidAba,'**\n');
fprintf(fidAba,'*Part, name=PART-1\n');

%%%node generation
fprintf(fidAba,'*Node\n');
for i = 1 : size(node,1)
%     fprintf(fidAba,'%d,\t%f,\t%f,\t%f\n', node(i,1), node(i,2), node(i,3),node(i,4));
    fprintf(fidAba,'%d,\t%f,\t%f,\t%f\n', i, node(i,1)*scaleTomm, node(i,2)*scaleTomm,node(i,3)*scaleTomm);
end

%%%element generation
fprintf(fidAba,'*Element, type=C3D8H\n');
for i = 1 : size(ele,1)
%     fprintf(fidAba,'%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d\n', ele(i,1),ele(i,2),ele(i,3),ele(i,4),...
%                                          ele(i,5),ele(i,6),ele(i,7),ele(i,8),ele(i,9));
    fprintf(fidAba,'%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d,\t%d\n', i, ele(i,1),ele(i,2),ele(i,3),ele(i,4),...
                                         ele(i,5),ele(i,6),ele(i,7),ele(i,8));                                 
end

%%%generate set
fprintf(fidAba,'*Nset, nset=ALL,  generate\n');
fprintf(fidAba,'1,\t%d,\t1\n',size(node,1));
fprintf(fidAba,'*Elset, elset=SOLID_BODY, generate\n');
fprintf(fidAba,'1,\t%d,\t1\n',size(ele,1));



%%%include the fiber direction
%%%indluce the solid section
fprintf(fidAba,'*End Part\n');

fprintf(fidAba,'**\n'); 
fprintf(fidAba,'**\n');
fprintf(fidAba,'** ASSEMBLY\n');
fprintf(fidAba,'**\n');
fprintf(fidAba,'*Assembly, name=Assembly\n');
fprintf(fidAba,'**\n');  
fprintf(fidAba,'*Instance, name=PART-1_1, part=PART-1\n');
fprintf(fidAba,'*End Instance\n');
fprintf(fidAba,'**\n');


%%%define extra sets
%%%define endo surface 
% endofacesT = endofacesDivision(endofaces);
% if ~isempty(endofacesT.S1faces)
%     Abaqusfaceswriting(endofacesT.S1faces, fidAba, 'endo_surf_s1');
% end
% if ~isempty(endofacesT.S2faces)
%     Abaqusfaceswriting(endofacesT.S2faces, fidAba, 'endo_surf_s2');
% end
% if ~isempty(endofacesT.S3faces)
%     Abaqusfaceswriting(endofacesT.S3faces, fidAba, 'endo_surf_s3');
% end
% if ~isempty(endofacesT.S4faces)
%     Abaqusfaceswriting(endofacesT.S4faces, fidAba, 'endo_surf_s4');
% end
% if ~isempty(endofacesT.S5faces)
%     Abaqusfaceswriting(endofacesT.S5faces, fidAba, 'endo_surf_s5');
% end
% if ~isempty(endofacesT.S6faces)
%     Abaqusfaceswriting(endofacesT.S6faces, fidAba, 'endo_surf_s6');
% end
% 
% %%%define epi surface 
% epifacesT = endofacesDivision(epifaces);
% if ~isempty(epifacesT.S1faces)
%     Abaqusfaceswriting(epifacesT.S1faces, fidAba, 'epi_surf_s1');
% end
% if ~isempty(epifacesT.S2faces)
%     Abaqusfaceswriting(epifacesT.S2faces, fidAba, 'epi_surf_s2');
% end
% if ~isempty(epifacesT.S3faces)
%     Abaqusfaceswriting(epifacesT.S3faces, fidAba, 'epi_surf_s3');
% end
% if ~isempty(epifacesT.S4faces)
%     Abaqusfaceswriting(epifacesT.S4faces, fidAba, 'epi_surf_s4');
% end
% if ~isempty(epifacesT.S5faces)
%     Abaqusfaceswriting(epifacesT.S5faces, fidAba, 'epi_surf_s5');
% end
% if ~isempty(epifacesT.S6faces)
%     Abaqusfaceswriting(epifacesT.S6faces, fidAba, 'epi_surf_s6');
% end
% 
% fprintf(fidAba, '*Surface, type=ELEMENT, name=endo_surf, internal\n');
% if ~isempty(endofacesT.S1faces)
%     fprintf(fidAba, 'endo_surf_s1, S1\n');
% end
% if ~isempty(endofacesT.S2faces)
%     fprintf(fidAba, 'endo_surf_s2, S2\n');
% end
% if ~isempty(endofacesT.S3faces)
%     fprintf(fidAba, 'endo_surf_s3, S3\n');
% end
% if ~isempty(endofacesT.S4faces)
%     fprintf(fidAba, 'endo_surf_s4, S4\n');
% end
% if ~isempty(endofacesT.S5faces)
%     fprintf(fidAba, 'endo_surf_s5, S5\n');
% end
% if ~isempty(endofacesT.S6faces)
%     fprintf(fidAba, 'endo_surf_s6, S6\n');
% end






fprintf(fidAba,'*End Assembly\n');


fclose(fidAba);



function Abaqusfaceswriting(S1faces, fidAba, strset)
fprintf(fidAba, '*Elset, elset=%s, internal, instance=PART-1_1 \n', strset);
    for i = 1 : length(S1faces)
        if mod(i,16) == 0
            fprintf(fidAba, '%d\n', S1faces(i));
        elseif i == length(S1faces)
            fprintf(fidAba, '%d\n', S1faces(i));
        else
            fprintf(fidAba, '%d,\t',S1faces(i) );
        end
    end
    
    





